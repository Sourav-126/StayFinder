// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  favoritesIds   String[]
  accounts       Account[]
  listings       Listing[]
  reservation    Reservation[]
}

model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  User          User?    @relation(fields: [userId], references: [id])
  title         String
  description   String?
  imageSrc      String?
  category      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  roomCount     Int
  childCount    Int
  guestCount    Int
  locationvalue String
  price         Int

  userId String? @db.ObjectId

  reservation Reservation[]
}

model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  User       User?    @relation(fields: [userId], references: [id])
  userId     String?  @db.ObjectId
  Listing    Listing? @relation(fields: [listingId], references: [id])
  listingId  String?  @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
